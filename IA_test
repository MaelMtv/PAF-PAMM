import cv2
import numpy as np
import os
import joblib
from PIL import Image, ImageFilter

# Fonction pour extraire les caractéristiques d'une image
def extract_features(image):
    blurred_image = cv2.GaussianBlur(image, (5, 5), 0)
    edges = cv2.Canny(blurred_image, 50, 150)
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    if len(contours) > 0:
        contour = max(contours, key=cv2.contourArea)
        area = cv2.contourArea(contour)
        perimeter = cv2.arcLength(contour, True)
        circularity = 4 * np.pi * area / (perimeter ** 2)
    else:
        area = 0
        perimeter = 0
        circularity = 0
    
    hist_b = cv2.calcHist([image], [0], None, [25], [0, 25])
    hist_g = cv2.calcHist([image], [1], None, [25], [0, 25])
    hist_r = cv2.calcHist([image], [2], None, [25], [0, 25])
    
    features = np.concatenate([hist_b.flatten(), hist_g.flatten(), hist_r.flatten(), [area, perimeter, circularity]])
    
    return features

# Chargement du modèle entraîné
model = joblib.load("model.pkl")

# Chemin du répertoire contenant les images
directory = "C:\\Users\\Alexandre\\OneDrive\\Bureau\\bddInit2"

# Récupérer la liste des fichiers dans le répertoire
file_list = os.listdir(directory)

# Filtrer les fichiers pour ne conserver que les images (extension .jpg)
image_files = [file for file in file_list if file.lower().endswith(".jpg")]

# Parcourir la liste des fichiers d'images
for image_file in image_files:
    # Chemin complet de l'image
    file_path = os.path.join(directory, image_file)

    # Charger l'image d'origine
    image = cv2.imread(file_path, 1)

    # Convertir en niveaux de gris
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Calculer l'histogramme
    def histogram_gray(img):
        a, b = img.shape
        total = a * b
        y = [0] * 256
        for i in range(len(img)):
            for j in img[i]:
                n = round(j)
                y[n] += 1
        z = [x / total for x in y]
        z2 = [0] * 256
        z2[0] = z[0]
        for l in range(1, 256):
            z2[l] = z[l] + z2[l - 1]

    # Égalisation dans l'espace LAB
    lab_image = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab_image)

    equa = cv2.equalizeHist(l)

    updated_lab_image = cv2.merge((equa, a, b))
    hist_eq_image = cv2.cvtColor(updated_lab_image, cv2.COLOR_LAB2BGR)

    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
    clahe_image = clahe.apply(l)

    updated_lab_image2 = cv2.merge((clahe_image, a, b))
    final_image = cv2.cvtColor(updated_lab_image2, cv2.COLOR_LAB2BGR)

    # Enregistrer l'image finale
    cv2.imwrite(file_path, final_image)

    # Supprimer les fichiers temporaires s'ils existent
    if os.path.exists("LAB_equa_4.jpg"):
         os.remove("LAB_equa_4.jpg")
    if os.path.exists("LAB_clahe_4.jpg"):
         os.remove("LAB_clahe_4.jpg")

    # Charger l'image d'origine avec PIL
    with Image.open(file_path) as img:
        img.load()

        # Appliquer le filtre de netteté
        sharp = img.filter(ImageFilter.SHARPEN)

        # Enregistrer l'image modifiée avec le même nom de fichier
        sharp.save(file_path)

        # Charger l'image modifiée avec OpenCV
        modified_image = cv2.imread(file_path, 1)

    features = extract_features(modified_image)  # Utiliser modified_image au lieu de image

    # Prédiction de la mention avec le modèle
    prediction = model.predict([features])
    mention_predite = "benign" if prediction[0] == 'benign' else 'malignant'
    print("La mention prédite pour l'image", image_file.split("\\")[-1].split(".")[0], "est :", mention_predite)
